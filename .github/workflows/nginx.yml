name: Build Nginx for Debian

on:
  push:
    tags:
      - "v*"
    branches: [ master ]
  # pull_request:
    # branches: [ master ]

jobs:
  build-nginx:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-24.04
          # wait 2024Q4 https://github.blog/changelog/2024-06-03-actions-arm-based-linux-and-windows-runners-are-now-in-public-beta/
          # - [self-hosted, linux, ARM64]
          # - ${{ format('codebuild-github-my-scripts-{0}-{1}', github.run_id, github.run_attempt) }}
          - ubuntu-24.04-arm
        env:
          - Dir: nginx-build
            Name: nginx
          - Dir: nginx-build-with-boringssl
            Name: nginx-boringssl
          - Dir: nginx-build-with-awslc
            Name: nginx-awslc
    runs-on: ${{ matrix.os }}
    container:
      image: quay.io/huihuimoe/ubuntu-ci-base:20.04
    defaults:
      run:
        shell: bash
    env:
      Dir: ${{ matrix.env.Dir }}
      Name: ${{ matrix.env.Name }}
      CLANG_VERSION: 20
    steps:
    - name: Set up packages
      run: |
        [ -z "$(command -v sudo)" ] && apt-get update && apt-get install -y sudo --no-install-recommends
        sudo apt-get update
        sudo apt list --upgradable
        sudo apt-get dist-upgrade -y
        sudo env DEBIAN_FRONTEND=noninteractive TZ=Asia/Tokyo apt-get install -y \
          binutils unzip curl gawk wget ca-certificates \
          git perl debhelper pkg-config nasm build-essential \
          lsb-release wget software-properties-common gnupg \
          --no-install-recommends
    - uses: actions/checkout@v4
    - name: Set up Clang
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh $CLANG_VERSION
        sudo update-alternatives --install "/usr/bin/ld" "ld" "/usr/bin/lld-${CLANG_VERSION}" 20
        sudo update-alternatives --install "/usr/bin/ld" "ld" "/usr/bin/ld.bfd" 10
        sudo update-alternatives --install "/usr/bin/ar" "ar" "/usr/bin/llvm-ar-${CLANG_VERSION}" 20
        # properly aarch64
        #sudo update-alternatives --install "/usr/bin/ar" "ar" "/usr/bin/x86_64-linux-gnu-ar" 10
    - name: Set up Golang
      if: ${{ matrix.env.Name }} != "nginx"
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'
    - name: Set up deps
      run: sudo bash ./.github/nginx-package-build/get-deps.sh && sudo rm -rf deps
    - name: Pack
      run: bash ./.github/nginx-package-build/pack.sh ${{ env.Dir }}
    - name: Show Info
      run: bash ./.github/nginx-package-build/show-info.sh ${{ env.Dir }}
    - name: Find artifact
      run: |
        FILE=$(find ./${{ env.Dir }} -name "*.deb" -type f | grep -v dbgsym) && echo $FILE
        echo "Artifact=$FILE" >> $GITHUB_ENV
    - name: Upload Binaries
      uses: actions/upload-artifact@v4
      with:
        # name: ${{ env.Name }}-${{ github.job }}.zip
        name: ${{ env.Name }}-${{ matrix.os }}.zip
        path: ${{ env.Artifact }}
    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ${{ env.Artifact }}
    - name: push package to packagecloud.io
      if: startsWith(github.ref, 'refs/tags/')
      # uses: computology/packagecloud-github-action@v0.8
      env:
        PACKAGE_NAME: ${{ env.Artifact }}
        PACKAGECLOUD_USERNAME: huihuimoe
        PACKAGECLOUD_REPONAME: ${{ env.Name }}-huihui
        PACKAGECLOUD_DISTRO: any/any
        PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
      run: |
        sudo apt-get install ruby ruby-dev build-essential --no-install-recommends -y
        sudo gem install package_cloud
        echo "PACKAGECLOUD_REPO=${PACKAGECLOUD_REPO}"
        echo "PACKAGECLOUD_DISTRO=${PACKAGECLOUD_DISTRO}"
        echo "PACKAGE_NAME=${PACKAGE_NAME}"
        UPLOAD_PATH="${PACKAGECLOUD_USERNAME}/${PACKAGECLOUD_REPONAME}/${PACKAGECLOUD_DISTRO}"
        echo "Pushing package: ${PACKAGE_NAME}"
        echo "To repository: ${UPLOAD_PATH}"
        package_cloud push ${UPLOAD_PATH} ${PACKAGE_NAME}

name: Build Nginx for Debian

on:
  push:
    tags:
      - "v*"
    branches: [ master ]
  # pull_request:
    # branches: [ master ]

jobs:
  build-nginx-openssl:
    # ubuntu-22 requires glibc 2.34
    runs-on: ubuntu-20.04
    env:
      Dir: nginx-build
    steps:
    - uses: actions/checkout@v4
    - name: Set up Clang
      uses: egor-tensin/setup-clang@v1
      with:
        version: 16
    # https://github.com/actions/runner-images/issues/6153
    - name: runner deps fixes
      run: sudo apt-get remove nginx libgd3
    - name: Set up packages
      run: sudo apt-get install -y binutils unzip curl gawk wget git perl debhelper cmake pkg-config nasm libpam-dev
    - name: Set up deps
      run: sudo bash ./.github/nginx-package-build/get-deps.sh
    - name: Pack
      run: bash ./.github/nginx-package-build/pack.sh $Dir
    - name: Show Info
      run: bash ./.github/nginx-package-build/show-info.sh $Dir
    - name: Find artifact
      run: |
        FILE=$(find ./$Dir -name "*.deb" -type f) && echo $FILE
        echo "Artifact=$FILE" >> $GITHUB_ENV
    - name: Upload Binaries
      uses: actions/upload-artifact@v3
      with:
        name: nginx-openssl-${{ github.sha }}.zip
        path: ${{ env.Artifact }}
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ${{ env.Artifact }}
    - name: push package to packagecloud.io
      uses: computology/packagecloud-github-action@v0.8
      if: startsWith(github.ref, 'refs/tags/')
      with:
        PACKAGE-NAME: ${{ env.Artifact }}
        PACKAGECLOUD-USERNAME: huihuimoe
        PACKAGECLOUD-REPONAME: nginx-huihui
        PACKAGECLOUD-DISTRO: any/any
        PACKAGECLOUD-TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
  build-nginx-boringssl:
    runs-on: ubuntu-20.04
    env:
      Dir: nginx-build-with-boringssl
    steps:
    - uses: actions/checkout@v4
    - name: Get latest go version
      id: go_version
      run: |
        echo ::set-output name=go_version::$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g')
    - name: Set up Golang
      uses: actions/setup-go@v5
      with:
        go-version: ${{ steps.go_version.outputs.go_version }}
    - name: Set up Clang
      uses: egor-tensin/setup-clang@v1
      with:
        version: 16
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    # - name: Set up packages
    #   run: sudo apt-get install -y unzip curl gawk wget git perl libexpat-dev libpcre3-dev libxml2-dev libxslt-dev libgeoip-dev libgd-dev libpam0g-dev libperl-dev libmaxminddb-dev uuid-dev debhelper cmake libunwind-dev
    # https://github.com/actions/runner-images/issues/6153
    - name: runner deps fixes
      run: sudo apt-get remove nginx libgd3
    - name: Set up packages
      run: sudo apt-get install -y binutils unzip curl gawk wget git perl debhelper cmake pkg-config nasm libpam-dev
    - name: Set up deps
      run: sudo bash ./.github/nginx-package-build/get-deps.sh
    - name: Pack
      run: bash ./.github/nginx-package-build/pack.sh $Dir
    - name: Show Info
      run: bash ./.github/nginx-package-build/show-info.sh $Dir
    - name: Find artifact
      run: |
        FILE=$(find ./$Dir -name "*.deb" -type f) && echo $FILE
        echo "Artifact=$FILE" >> $GITHUB_ENV
    - name: Upload Binaries
      uses: actions/upload-artifact@v3
      with:
        name: nginx-boringssl-${{ github.sha }}.zip
        path: ${{ env.Artifact }}
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ${{ env.Artifact }}
    - name: push package to packagecloud.io
      uses: computology/packagecloud-github-action@v0.8
      if: startsWith(github.ref, 'refs/tags/')
      with:
        PACKAGE-NAME: ${{ env.Artifact }}
        PACKAGECLOUD-USERNAME: huihuimoe
        PACKAGECLOUD-REPONAME: nginx-boringssl-huihui
        PACKAGECLOUD-DISTRO: any/any
        PACKAGECLOUD-TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}

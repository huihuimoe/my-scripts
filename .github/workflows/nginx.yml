name: Build Nginx for Debian

on:
  push:
    tags:
      - "v*"
    branches: [ master ]
  # pull_request:
    # branches: [ master ]

jobs:
  build-nginx:
    strategy:
      matrix:
        os:
          # ubuntu-22 requires glibc 2.34
          - ubuntu-20.04
          - [self-hosted, linux, ARM64]
        env:
          - Dir: nginx-build
            Name: nginx
          - Dir: nginx-build-with-boringssl
            Name: nginx-boringssl
    runs-on: ${{ matrix.os }}
    env:
      Dir: ${{ matrix.env.Dir }}
      Name: ${{ matrix.env.Name }}
      CLANG_VERSION: 17
    steps:
    - uses: actions/checkout@v4
    - name: Set up Clang
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh $CLANG_VERSION
    - name: Get latest go version
      if: ${{ matrix.env.Name }} == "nginx-boringssl"
      id: go_version
      run: |
        echo ::set-output name=go_version::$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g')
    - name: Set up Golang
      if: ${{ matrix.env.Name }} == "nginx-boringssl"
      uses: actions/setup-go@v5
      with:
        go-version: ${{ steps.go_version.outputs.go_version }}
    - name: Set up Rust
      if: ${{ matrix.env.Name }} == "nginx-boringssl"
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    # https://github.com/actions/runner-images/issues/6153
    - name: runner deps fixes
      run: sudo apt-get remove nginx libgd3
    - name: Set up packages
      run: sudo apt-get install -y binutils unzip curl gawk wget git mercurial perl debhelper cmake pkg-config nasm libpam-dev
    - name: Set up deps
      run: sudo bash ./.github/nginx-package-build/get-deps.sh && sudo chown -R $USER:$USER deps
    - name: Pack
      run: bash ./.github/nginx-package-build/pack.sh $Dir
    - name: Show Info
      run: bash ./.github/nginx-package-build/show-info.sh $Dir
    - name: Find artifact
      run: |
        FILE=$(find ./$Dir -name "*.deb" -type f | grep -v dbgsym) && echo $FILE
        echo "Artifact=$FILE" >> $GITHUB_ENV
    - name: Upload Binaries
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.Name }}-${{ github.sha }}.zip
        path: ${{ env.Artifact }}
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ${{ env.Artifact }}
    - name: push package to packagecloud.io
      if: startsWith(github.ref, 'refs/tags/')
      # uses: computology/packagecloud-github-action@v0.8
      env:
        PACKAGE_NAME: ${{ env.Artifact }}
        PACKAGECLOUD_USERNAME: huihuimoe
        PACKAGECLOUD_REPONAME: ${{ env.Name }}-huihui
        PACKAGECLOUD_DISTRO: any/any
        PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
      run: |
        sudo gpg --keyserver keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
        curl -sSL https://get.rvm.io | sudo bash -s stable --ruby
        source /usr/local/rvm/scripts/rvm
        sudo bash -c "source /usr/local/rvm/scripts/rvm && gem install package_cloud"
        echo "PACKAGECLOUD_REPO=${PACKAGECLOUD_REPO}"
        echo "PACKAGECLOUD_DISTRO=${PACKAGECLOUD_DISTRO}"
        echo "PACKAGE_NAME=${PACKAGE_NAME}"
        UPLOAD_PATH="${PACKAGECLOUD_USERNAME}/${PACKAGECLOUD_REPONAME}/${PACKAGECLOUD_DISTRO}"
        echo "Pushing package: ${PACKAGE_NAME}"
        echo "To repository: ${UPLOAD_PATH}"
        package_cloud push ${UPLOAD_PATH} ${PACKAGE_NAME}
